library(bio3d)
aa <- get.seq("1ake_A")
aa
# Blast or hmmer search
b <- blast.pdb(aa)
# Plot a summary of search results
hits <- plot(b)
# List out some 'top hits'
head(hits$pdb.id)
hits <- NULL
hits$pdb.id <- c('1AKE_A','6S36_A','6RZE_A','3HPR_A','1E4V_A','5EJE_A','1E4Y_A','3X2S_A','6HAP_A','6HAM_A','4K46_A','3GMT_A','4PZL_A')
# Download releated PDB files
files <- get.pdb(hits$pdb.id, path="pdbs", split=TRUE, gzip=TRUE)
# Align releated PDBs
pdbs <- pdbaln(files, fit = TRUE, exefile="msa")
# Align releated PDBs
pdbs <- pdbaln(files, fit = TRUE, exefile="msa")
# Download releated PDB files
files <- get.pdb(hits$pdb.id, path="pdbs", split=TRUE, gzip=TRUE)
data <- read.csv("Data Export Summary.csv")
xray_total <- sum(as.numeric(gsub(",", "", data$X.ray)))
em_total <- sum(as.numeric(gsub(",", "", data$EM)))
total_structures <- sum(as.numeric(gsub(",", "", data$Total)))
xray_percentage <- (xray_total / total_structures) * 100
em_percentage <- (em_total / total_structures) * 100
xray_percentage
em_percentage
protein_total <- as.numeric(gsub(",", "", data[data$Molecular.Type == "Protein (only)", "Total"]))
protein_proportion <- (protein_total / total_structures) * 100
protein_proportion
library(bio3d)
pdb <- read.pdb("1hsg")
pdb
attributes(pdb)
head(pdb$atom)
adk <- read.pdb("6s36")
adk
m <- nma(adk)
plot(m)
library(bio3d.view)
install.packages("bio3d")
install.packages("devtools")
install.packages("BiocManager")
BiocManager::install("msa")
install.packages("devtools")
library(bio3d.view)
data <- read.csv("Data Export Summary.csv")
xray_total <- sum(as.numeric(gsub(",", "", data$X.ray)))
em_total <- sum(as.numeric(gsub(",", "", data$EM)))
total_structures <- sum(as.numeric(gsub(",", "", data$Total)))
xray_percentage <- (xray_total / total_structures) * 100
em_percentage <- (em_total / total_structures) * 100
xray_percentage
em_percentage
protein_total <- as.numeric(gsub(",", "", data[data$Molecular.Type == "Protein (only)", "Total"]))
protein_proportion <- (protein_total / total_structures) * 100
protein_proportion
library(bio3d)
pdb <- read.pdb("1hsg")
pdb
attributes(pdb)
head(pdb$atom)
adk <- read.pdb("6s36")
adk
m <- nma(adk)
plot(m)
data <- read.csv("Data Export Summary.csv")
xray_total <- sum(as.numeric(gsub(",", "", data$X.ray)))
em_total <- sum(as.numeric(gsub(",", "", data$EM)))
total_structures <- sum(as.numeric(gsub(",", "", data$Total)))
xray_percentage <- (xray_total / total_structures) * 100
em_percentage <- (em_total / total_structures) * 100
xray_percentage
em_percentage
protein_total <- as.numeric(gsub(",", "", data[data$Molecular.Type == "Protein (only)", "Total"]))
protein_proportion <- (protein_total / total_structures) * 100
protein_proportion
library(bio3d)
pdb <- read.pdb("1hsg")
pdb
attributes(pdb)
head(pdb$atom)
adk <- read.pdb("6s36")
adk
m <- nma(adk)
#plot(m)
mktrj(m, file="adk_m7.pdb")
library(bio3d)
aa <- get.seq("1ake_A")
aa
# Blast or hmmer search
b <- blast.pdb(aa)
library(bio3d.view)
install.packages("devtools")
install.packages("devtools")
devtools::install_bitbucket("Grantlab/bio3d-view")
library(bio3d.view)
library(rgl)
library(bio3d.view)
library(rgl)
view.pdbs(pdbs)
# Align releated PDBs
pdbs <- pdbaln(files, fit = TRUE, exefile="msa")
# Align releated PDBs
pdbs <- pdbaln(files, fit = TRUE, exefile="msa")
data <- read.csv("Data Export Summary.csv")
xray_total <- sum(as.numeric(gsub(",", "", data$X.ray)))
em_total <- sum(as.numeric(gsub(",", "", data$EM)))
total_structures <- sum(as.numeric(gsub(",", "", data$Total)))
xray_percentage <- (xray_total / total_structures) * 100
em_percentage <- (em_total / total_structures) * 100
xray_percentage
em_percentage
protein_total <- as.numeric(gsub(",", "", data[data$Molecular.Type == "Protein (only)", "Total"]))
protein_proportion <- (protein_total / total_structures) * 100
protein_proportion
library(bio3d)
pdb <- read.pdb("1hsg")
pdb
attributes(pdb)
head(pdb$atom)
adk <- read.pdb("6s36")
adk
m <- nma(adk)
#plot(m)
mktrj(m, file="adk_m7.pdb")
library(bio3d)
aa <- get.seq("1ake_A")
aa
# Blast or hmmer search
b <- blast.pdb(aa)
# Plot a summary of search results
hits <- plot(b)
data <- read.csv("Data Export Summary.csv")
xray_total <- sum(as.numeric(gsub(",", "", data$X.ray)))
em_total <- sum(as.numeric(gsub(",", "", data$EM)))
total_structures <- sum(as.numeric(gsub(",", "", data$Total)))
xray_percentage <- (xray_total / total_structures) * 100
em_percentage <- (em_total / total_structures) * 100
xray_percentage
em_percentage
protein_total <- as.numeric(gsub(",", "", data[data$Molecular.Type == "Protein (only)", "Total"]))
protein_proportion <- (protein_total / total_structures) * 100
protein_proportion
library(bio3d)
pdb <- read.pdb("1hsg")
pdb
attributes(pdb)
head(pdb$atom)
adk <- read.pdb("6s36")
adk
m <- nma(adk)
#plot(m)
mktrj(m, file="adk_m7.pdb")
library(bio3d)
aa <- get.seq("1ake_A")
aa
# Blast or hmmer search
b <- blast.pdb(aa)
# Plot a summary of search results
hits <- plot(b)
# List out some 'top hits'
head(hits$pdb.id)
#hits <- NULL
hits$pdb.id <- c('1AKE_A','6S36_A','6RZE_A','3HPR_A','1E4V_A','5EJE_A','1E4Y_A','3X2S_A','6HAP_A','6HAM_A','4K46_A','3GMT_A','4PZL_A')
# Download releated PDB files
files <- get.pdb(hits$pdb.id, path="pdbs", split=TRUE, gzip=TRUE)
# Load necessary libraries
library(readxl)
library(Biostrings)
# Define the path to the Excel file
excel_file <- "/Users/juangonzalez/Desktop/PhD_Andrew_Lab/LNG1_Gene_Family_Sequences/Gene_Family_Sequences_v1.xlsx"
# Get sheet names
sheet_names <- excel_sheets(excel_file)
# Function to write a sequence to a FASTA format
write_fasta <- function(df, output_file) {
sequences <- DNAStringSet(df$sequence)
names(sequences) <- df$gene_id
writeXStringSet(sequences, filepath = output_file)
}
# Loop through each sheet, read the data, and write to FASTA
for (sheet in sheet_names) {
# Read data from the current sheet
df <- read_excel(excel_file, sheet = sheet)
# Define the output file name for each gene's family in FASTA format
output_file <- paste0("/Users/juangonzalez/Desktop/PhD_Andrew_Lab/LNG1_Gene_Family_Sequences/", sheet, ".fasta")
# Write to FASTA
write_fasta(df, output_file)
cat("Saved", output_file, "successfully.\n")
}
# Load necessary libraries
library(readxl)
library(Biostrings)
# Define the path to the Excel file
excel_file <- "/Users/juangonzalez/Desktop/PhD_Andrew_Lab/LNG1_Gene_Family_Sequences/Gene_Family_Sequences_v1.xlsx"
# Get sheet names
sheet_names <- excel_sheets(excel_file)
# Function to write a sequence to a FASTA format
write_fasta <- function(df, output_file) {
sequences <- DNAStringSet(df$sequence)
names(sequences) <- df$gene_id
writeXStringSet(sequences, filepath = output_file)
}
# Loop through each sheet, read the data, and write to FASTA
for (sheet in sheet_names) {
# Read data from the current sheet
df <- read_excel(excel_file, sheet = sheet)
# Define the output file name for each gene's family in FASTA format
output_file <- paste0("/Users/juangonzalez/Desktop/PhD_Andrew_Lab/LNG1_Gene_Family_Sequences/", sheet, ".fasta")
# Write to FASTA
write_fasta(df, output_file)
cat("Saved", output_file, "successfully.\n")
}
# Load necessary libraries
library(readxl)
library(Biostrings)
# Define the path to the Excel file
excel_file <- "/Users/juangonzalez/Desktop/PhD_Andrew_Lab/LNG1_Gene_Family_Sequences/Gene_Family_Sequences_v1.xlsx"
# Get sheet names
sheet_names <- excel_sheets(excel_file)
# Function to write a sequence to a FASTA format
write_fasta <- function(df, output_file) {
sequences <- DNAStringSet(df$sequence)
names(sequences) <- df$gene_id
writeXStringSet(sequences, filepath = output_file)
}
# Loop through each sheet, read the data, and write to FASTA
for (sheet in sheet_names) {
# Read data from the current sheet
df <- read_excel(excel_file, sheet = sheet)
# Define the output file name for each gene's family in FASTA format
output_file <- paste0("/Users/juangonzalez/Desktop/PhD_Andrew_Lab/LNG1_Gene_Family_Sequences/", sheet, ".fasta")
# Write to FASTA
write_fasta(df, output_file)
cat("Saved", output_file, "successfully.\n")
}
